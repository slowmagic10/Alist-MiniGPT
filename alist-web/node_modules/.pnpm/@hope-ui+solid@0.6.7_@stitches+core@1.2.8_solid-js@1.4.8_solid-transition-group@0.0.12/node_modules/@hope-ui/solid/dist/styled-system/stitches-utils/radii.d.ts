import type { PropertyValue } from "@stitches/core";
export declare const radii: {
    /**
     * The CSS `border-top-left-radius` and `border-top-right-radius` property
     */
    borderTopRadius: (value: PropertyValue<"borderTopLeftRadius">) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    /**
     * The CSS `border-top-right-radius` and `border-bottom-right-radius` property
     */
    borderRightRadius: (value: PropertyValue<"borderTopRightRadius">) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        };
    };
    /**
     * The CSS `border-start-start-radius` and `border-end-start-radius` property
     */
    borderStartRadius: (value: PropertyValue<"borderStartStartRadius">) => {
        borderStartStartRadius: {
            readonly [$$PropertyValue]: "borderStartStartRadius";
        };
        borderEndStartRadius: {
            readonly [$$PropertyValue]: "borderStartStartRadius";
        };
    };
    /**
     * The CSS `border-bottom-right-radius` and `border-bottom-left-radius` property
     */
    borderBottomRadius: (value: PropertyValue<"borderBottomLeftRadius">) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    /**
     * The CSS `border-top-left-radius` and `border-bottom-left-radius` property
     */
    borderLeftRadius: (value: PropertyValue<"borderTopLeftRadius">) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    /**
     * The CSS `border-start-end-radius` and `border-end-end-radius` property
     */
    borderEndRadius: (value: PropertyValue<"borderStartEndRadius">) => {
        borderStartEndRadius: {
            readonly [$$PropertyValue]: "borderStartEndRadius";
        };
        borderEndEndRadius: {
            readonly [$$PropertyValue]: "borderStartEndRadius";
        };
    };
    /**
     * The CSS `border-radius` property
     */
    rounded: (value: PropertyValue<"borderRadius">) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    /**
     * The CSS `border-top-left-radius` and `border-top-right-radius` property
     */
    roundedTop: (value: PropertyValue<"borderTopLeftRadius">) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    /**
     * The CSS `border-top-right-radius` and `border-bottom-right-radius` property
     */
    roundedRight: (value: PropertyValue<"borderTopRightRadius">) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        };
    };
    /**
     * The CSS `border-start-start-radius` and `border-end-start-radius` property
     */
    roundedStart: (value: PropertyValue<"borderStartStartRadius">) => {
        borderStartStartRadius: {
            readonly [$$PropertyValue]: "borderStartStartRadius";
        };
        borderEndStartRadius: {
            readonly [$$PropertyValue]: "borderStartStartRadius";
        };
    };
    /**
     * The CSS `border-bottom-right-radius` and `border-bottom-left-radius` property
     */
    roundedBottom: (value: PropertyValue<"borderBottomLeftRadius">) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    /**
     * The CSS `border-top-left-radius` and `border-bottom-left-radius` property
     */
    roundedLeft: (value: PropertyValue<"borderTopLeftRadius">) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    /**
     * The CSS `border-start-end-radius` and `border-end-end-radius` property
     */
    roundedEnd: (value: PropertyValue<"borderStartEndRadius">) => {
        borderStartEndRadius: {
            readonly [$$PropertyValue]: "borderStartEndRadius";
        };
        borderEndEndRadius: {
            readonly [$$PropertyValue]: "borderStartEndRadius";
        };
    };
};
//# sourceMappingURL=radii.d.ts.map