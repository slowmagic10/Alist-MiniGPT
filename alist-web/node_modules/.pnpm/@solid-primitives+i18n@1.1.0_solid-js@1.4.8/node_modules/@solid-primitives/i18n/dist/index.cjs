var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  I18nContext: () => I18nContext,
  createI18nContext: () => createI18nContext,
  useI18n: () => useI18n
});
module.exports = __toCommonJS(src_exports);
var import_solid_js = require("solid-js");
var import_store = require("solid-js/store");
var deepReadObject = (obj, path, defaultValue) => {
  const value = path.trim().split(".").reduce((a, b) => a ? a[b] : void 0, obj);
  return value !== void 0 ? value : defaultValue;
};
var template = (str, params, reg = /{{(.*?)}}/g) => str.replace(reg, (_, key) => deepReadObject(params, key, ""));
var createI18nContext = (init = {}, lang = navigator.language in init ? navigator.language : Object.keys(init)[0]) => {
  const [locale, setLocale] = (0, import_solid_js.createSignal)(lang);
  const [dict, setDict] = (0, import_store.createStore)(init);
  const translate = (key, params, defaultValue) => {
    const val = deepReadObject(dict[locale()], key, defaultValue || "");
    if (typeof val === "function")
      return val(params);
    if (typeof val === "string")
      return template(val, params || {});
    return val;
  };
  const actions = {
    add(lang2, table) {
      setDict(lang2, (t) => Object.assign(t || {}, table));
    },
    locale: (lang2) => lang2 ? setLocale(lang2) : locale(),
    dict: (lang2) => deepReadObject(dict, lang2)
  };
  return [translate, actions];
};
var I18nContext = (0, import_solid_js.createContext)({});
var useI18n = () => (0, import_solid_js.useContext)(I18nContext);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  I18nContext,
  createI18nContext,
  useI18n
});
