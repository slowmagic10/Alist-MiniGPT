import type { Element, ElementContent, Root } from "hast";
import type { Schema } from "property-information";
import type { NormalComponents, SolidMarkdownProps } from "./complex-types";
declare type Context = {
    options: Options;
    schema: Schema;
    listDepth: number;
};
declare type TransformLink = (href: string, children: ElementContent[], title?: string) => string;
declare type TransformImage = (src: string, alt: string, title?: string) => string;
declare type TransformLinkTargetType = "_self" | "_blank" | "_parent" | "_top" | (string & {});
declare type TransformLinkTarget = (href: string, children: ElementContent[], title?: string) => TransformLinkTargetType | undefined;
declare type SolidMarkdownNames = keyof JSX.IntrinsicElements;
declare type CodeComponent = Component<JSX.IntrinsicElements["code"] & SolidMarkdownProps & {
    inline?: boolean;
}>;
declare type HeadingComponent = Component<JSX.IntrinsicElements["h1"] & SolidMarkdownProps & {
    level: number;
}>;
declare type LiComponent = Component<JSX.IntrinsicElements["li"] & SolidMarkdownProps & {
    checked: boolean | null;
    index: number;
    ordered: boolean;
}>;
declare type OrderedListComponent = Component<JSX.IntrinsicElements["ol"] & SolidMarkdownProps & {
    depth: number;
    ordered: true;
}>;
declare type TableCellComponent = Component<JSX.IntrinsicElements["table"] & SolidMarkdownProps & {
    style?: Record<string, unknown>;
    isHeader: boolean;
}>;
declare type TableRowComponent = Component<JSX.IntrinsicElements["tr"] & SolidMarkdownProps & {
    isHeader: boolean;
}>;
declare type UnorderedListComponent = Component<JSX.IntrinsicElements["ul"] & SolidMarkdownProps & {
    depth: number;
    ordered: false;
}>;
declare type SpecialComponents = {
    code: CodeComponent | SolidMarkdownNames;
    h1: HeadingComponent | SolidMarkdownNames;
    h2: HeadingComponent | SolidMarkdownNames;
    h3: HeadingComponent | SolidMarkdownNames;
    h4: HeadingComponent | SolidMarkdownNames;
    h5: HeadingComponent | SolidMarkdownNames;
    h6: HeadingComponent | SolidMarkdownNames;
    li: LiComponent | SolidMarkdownNames;
    ol: OrderedListComponent | SolidMarkdownNames;
    td: TableCellComponent | SolidMarkdownNames;
    th: TableCellComponent | SolidMarkdownNames;
    tr: TableRowComponent | SolidMarkdownNames;
    ul: UnorderedListComponent | SolidMarkdownNames;
};
declare type Components = Partial<Omit<NormalComponents, keyof SpecialComponents>> & Partial<SpecialComponents>;
export declare type Options = {
    sourcePos: boolean;
    rawSourcePos: boolean;
    skipHtml: boolean;
    includeElementIndex: boolean;
    transformLinkUri: null | false | TransformLink;
    transformImageUri?: TransformImage;
    linkTarget: TransformLinkTargetType | TransformLinkTarget;
    components: Components;
};
import { Component, JSX } from "solid-js";
export declare function childrenToSolid(context: Context, node: Element | Root): JSX.Element[];
export {};
