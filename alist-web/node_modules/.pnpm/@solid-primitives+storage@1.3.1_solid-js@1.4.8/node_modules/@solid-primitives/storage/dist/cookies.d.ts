import * as solid_js from 'solid-js';
import { S as StorageWithOptions, d as StorageProps, e as StorageObject, f as StorageSetter, l as StorageActions, k as StorageSignalProps } from './types-7e293a10.js';

declare type CookieOptions = {
    domain?: string;
    expires?: Date | number | String;
    path?: string;
    secure?: boolean;
    httpOnly?: boolean;
    maxAge?: number;
    sameSite?: "None" | "Lax" | "Strict";
};
/**
 * handle cookies exactly like you would handle localStorage
 *
 * the main change is that setItem accepts the following options:
 * ```typescript
 * export type CookieOptions = {
 *   domain?: string;
 *   expires?: Date | number | String;
 *   path?: string;
 *   secure?: boolean;
 *   httpOnly?: boolean;
 *   maxAge?: number;
 *   sameSite?: "None" | "Lax" | "Strict";
 * };
 * ```
 */
declare const cookieStorage: StorageWithOptions<CookieOptions>;
/**
 * creates a reactive store but bound to document.cookie
 */
declare const createCookieStorage: <T, O = CookieOptions, A = StorageWithOptions<CookieOptions>>(props?: Omit<StorageProps<T, A, O>, "api"> | undefined) => [store: StorageObject<T>, setter: StorageSetter<T, O>, actions: StorageActions<T>];
/**
 * creates a reactive signal, but bound to document.cookie
 */
declare const createCookieStorageSignal: <T, O = CookieOptions, A = StorageWithOptions<CookieOptions>>(key: string, initialValue?: T | undefined, props?: Omit<StorageSignalProps<T, A, O>, "api"> | undefined) => [accessor: solid_js.Accessor<T | null>, setter: solid_js.Setter<T | null>, refetch: () => void];

export { CookieOptions, cookieStorage, createCookieStorage, createCookieStorageSignal };
