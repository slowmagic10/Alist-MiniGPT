import {
  createStorage,
  createStorageSignal
} from "./chunk-RZJ5ENWX.js";
import {
  addClearMethod
} from "./chunk-UHHZE4FR.js";
import {
  __spreadProps,
  __spreadValues
} from "./chunk-JUWXSDKJ.js";

// src/cookies.ts
var serializeCookieOptions = (options) => {
  if (!options) {
    return "";
  }
  let memo = "";
  for (const key in options) {
    if (!options.hasOwnProperty(key)) {
      continue;
    }
    const value = options[key];
    memo += value instanceof Date ? `; ${key}=${value.toUTCString()}` : typeof value === "boolean" ? `; ${key}` : `; ${key}=${value}`;
  }
  return memo;
};
var cookieStorage = addClearMethod({
  _cookies: [globalThis.document, "cookie"],
  getItem: (key) => {
    var _a, _b;
    return (_b = (_a = cookieStorage._cookies[0][cookieStorage._cookies[1]].match("(^|;)\\s*" + key + "\\s*=\\s*([^;]+)")) == null ? void 0 : _a.pop()) != null ? _b : null;
  },
  setItem: (key, value, options) => {
    var _a;
    const oldValue = cookieStorage.getItem(key);
    cookieStorage._cookies[0][cookieStorage._cookies[1]] = `${key}=${value}${serializeCookieOptions(options)}`;
    const storageEvent = Object.assign(new Event("storage"), {
      key,
      oldValue,
      newValue: value,
      url: (_a = globalThis.document) == null ? void 0 : _a.URL,
      storageArea: cookieStorage
    });
    window.dispatchEvent(storageEvent);
  },
  removeItem: (key) => {
    cookieStorage._cookies[0][cookieStorage._cookies[1]] = `${key}=deleted${serializeCookieOptions({
      expires: new Date(0)
    })}`;
  },
  key: (index) => {
    let key = null;
    let count = 0;
    cookieStorage._cookies[0][cookieStorage._cookies[1]].replace(/(?:^|;)\s*(.+?)\s*=\s*[^;]+/g, (_, found) => {
      if (!key && found && count++ === index) {
        key = found;
      }
      return "";
    });
    return key;
  },
  get length() {
    let length = 0;
    cookieStorage._cookies[0][cookieStorage._cookies[1]].replace(/(?:^|;)\s*.+?\s*=\s*[^;]+/g, (found) => {
      length += found ? 1 : 0;
      return "";
    });
    return length;
  }
});
var createCookieStorage = (props) => createStorage(__spreadProps(__spreadValues({}, props), { api: cookieStorage }));
var createCookieStorageSignal = (key, initialValue, props) => createStorageSignal(key, initialValue, __spreadProps(__spreadValues({}, props), { api: cookieStorage }));

export {
  cookieStorage,
  createCookieStorage,
  createCookieStorageSignal
};
