import { createMotionState, createStyles, style, } from "@motionone/dom";
import { isFunction } from "@motionone/utils";
import { createEffect, getOwner, runWithOwner, useContext, } from "solid-js";
import { defaultPresenceContextState, PresenceContext, } from "./context";
/** @internal */
export function createAndBindMotionState(target, options, presenceState, parentState) {
    const { addCleanup, addMount, initial } = presenceState;
    const state = createMotionState(initial() ? options() : { ...options(), initial: false }, parentState);
    addMount(runWithOwner.bind(void 0, getOwner(), () => {
        addCleanup(state.mount(target()));
        createEffect(() => state.update(options()));
    }));
    return state;
}
/**
 * createMotion provides MotionOne as a compact Solid primitive.
 *
 * @param target Target Element to animate.
 * @param options Options to effect the animation.
 * @param presenceState Optional PresenceContext override, defaults to current parent.
 * @returns Object to access MotionState
 */
export function createMotion(target, options, presenceState = defaultPresenceContextState) {
    const getOptions = () => (isFunction(options) ? options() : options);
    const state = createAndBindMotionState(() => target, getOptions, presenceState);
    const styles = createStyles(state.getTarget());
    for (const key in styles) {
        style.set(target, key, styles[key]);
    }
    return state;
}
/**
 * motion is a Solid directive that makes binding to elements easier.
 *
 * @param el Target Element to bind to.
 * @param props Options to effect the animation.
 */
export function motion(el, props) {
    createMotion(el, props, useContext(PresenceContext));
}
